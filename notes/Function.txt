Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-09-12T11:41:30+02:00

====== Function ======
Created Saturday 12 September 2020

====== Overview ======

Gossip uses the goroutine concurrency of Golang and channels. Each call party is handled by a goroutine that reads from a dedicated channel and executes some actions. A central director routes SIP messages using maps. Their keys are tags, numbers, callId and values are the input channels of those goroutines.


====== Gossip ======

The main function 
* reads command line arguments
* reads the configuration
* reads the tests from files, walking directories, tests are given on command line
* handles signals - TODO: what should be responded to
* Runs a prescribed number of loops and sends the tests through a channel.

====== Inner workings ======

There is a hierarchy to the test execution.

* Test suite 1
	* Test 1
		* Call 1
			* Call party alpha
			* Call party beta
				* Call
					* Dialog
						* Transaction 1
							* Message Invite
							* Message 100
							* ...
						* Transaction 2
* Test suite 2

The test suites are read in from specifications in yaml. They describe the tests with each call party in a separate stream. The stream contains both messages, tests and other actions.
* Test suite
	* Test
		* Call
			* Actions

===== Layer organisation =====

1. SipProvider, UDP and TCP. They send and receive byte packages to and from the remote side. They assemble the messages from the byte stream or create the bytes to send. They:
	a. do final touch on the message
		1. content-length
		2. route and via stuff
	b. transmit packages to the remote side
	c. handle retransmissions
	d. stop retransmissions when there are automatic answers (100 trying, 200 on Cancel, 200 on Bye)
	e. transform received messages into a [[GossipMsg]]
	f. transfer messages to the Director level
2. Route/Director: It handles messages and routes them to the lower level (SipProviders) or upper level (Call party handlers)
3. Transaction layer: consists of helper functions that create new messages based on previous or from scratch
4. Dialog level: mostly a data structure for status keeping
5. Call level: general structure with status information and similar
6. Call party level: a goroutine that is a handler for messages. Each goroutine has an own dedicated channel for receiving [[GossipItem]] .
7. Test run: it creates and registers the involved call parties and spawns the associated goroutines, after each run, it accumulated the status quo from each party
8. Test: it initiates the separate runs and accumulates the results
9. Test suite: only exists as a data structure for grouping tests
10. Test Executionair - runs the prescribed number of loops of test suites.

===== Limiting =====

The calls are both limited by the rate of instantiation and the number of concurrent calls. Different tests might be executed in parallel, since they should be independent. The call instantiation rate is regulated by a ticker channel. The concurrency is based on a counter. 

Similarly, the main function loops through the tests and creates new executors, if the current number isn't big enough. Executors check at each loop start, if their presence falls within the limit. If not, they terminate. If the pass the limit test, they will proceed to read a test from their input channel.

===== Main routine =====

1. The command line flags are read
2. The configuration is read
3. Configuration values are overriden by command line values
4. Setup of the infrastructure is carried out
5. Tests are read in from places specified on the command line
6. Signal handling is commenced.
7. (TODO: implement) optional interactive management.
8. The prescribed number of loops are carried out. When all tests are done, the main routine exists.

==== Execution of tests ====

The loop in //main// iterates through the tests. Before the start of each test, it checks if there are enough test run executors running. If not, a new one is spawned and the test is send through the channel.

===== Director =====

The director maintains a number of maps, that map from tags/values to channels. For incoming calls, the called number is used as a first instance. Due to concurrency, access must be serialized using a Mutex. Different entities can register channels as a receiver for messages with certain tags.

==== Removal of channels ====

Since different entities can register channels under arbitrary keys, channels are removed when the listener are gone. This is the case when the channel runs full and blocks submissions.

At seconds interval, a nil message is send to all channels. Channels that block are then removed from the map.

===== Retransmissions and automatic answers =====

Since UDP is unreliable, each initial message is send repeatedly until its reception is acknowledged. 100-trying stops retransmission of Invites, which means that final responses must be retransmitted until stopped by an ACK. 

Cancel and Bye do terminate a call and their response do not provide any additional information. Hence their 200 response can be generated automatically. Similarly, the 100-trying on Invites don't carry information - hence they can be an automatic response and are implement like that.

==== Implementation of retransmissions ====
The retransmitted message in it's [[GossipItem]] has Retramsnission set to a value. On the initial submission, the via tag is recorded in a map. When a message arrives in that layer, this map is checked and if found, the retransmission is set to None. That way the message gets not retransmitted. Then, the map entry is removed.

===== Test run =====

A test consists of one or more call parties, each one with a unique phone number. Each party reads its messages from a dedicated channel, which has to be registered in the director. The calling party needs to take a token from the limiter.

===== Test run executioner =====

It reads the tests to be executed from a dedicated channel. Each test needs to be locked, so the same test cannot be executed twice. 

====== Components ======

* [[Director]], sorts which function channel will deal with the incoming message
* [[Scripts]] , at the moment only an example for config 

